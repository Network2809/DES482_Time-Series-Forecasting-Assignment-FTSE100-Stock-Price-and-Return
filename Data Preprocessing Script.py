# # -*- coding: utf-8 -*-
# """tsf_dataPreprocessing.ipynb

# Automatically generated by Colab.

# Original file is located at
#     https://colab.research.google.com/drive/14iThCJk1_Qaw6aj0LS0tl4TDarHDEdTq
# """

# import pandas as pd
# import numpy as np
# import matplotlib.pyplot as plt
# import yfinance as yf

# # Download Nikkei 225 Data
# symbol = "^N225"
# start_date = "2000-01-01"
# end_date = "2025-05-31"
# data = yf.download(symbol, start=start_date, end=end_date)
# data.head()

# # Keep only closing prices
# df = data[["Close"]].copy()
# df.rename(columns={"Close": "Price"}, inplace=True)
# df.head()

# # Calculate daily returns
# df["Return"] = df["Price"].pct_change()

# # Apply log transformation for variance stabilization
# df["LogPrice"] = np.log(df["Price"])
# df["LogReturn"] = df["LogPrice"].diff()

# # Handle missing values
# df.ffill(inplace=True)  # Forward fill
# df.dropna(inplace=True)  # Drop any remaining NaNs
# df.head()

# # Price over time
# plt.figure(figsize=(14, 4))
# df["Price"].plot(title="Nikkei 225 Closing Price", ylabel="Price", xlabel="Date")
# plt.grid(True)
# plt.tight_layout()
# plt.show()

# # Daily returns over time
# plt.figure(figsize=(14, 4))
# df["Return"].plot(title="Daily Returns", ylabel="Return", xlabel="Date")
# plt.grid(True)
# plt.tight_layout()
# plt.show()

# # Log returns over time
# plt.figure(figsize=(14, 4))
# df["LogReturn"].plot(title="Log Returns", ylabel="Log Return", xlabel="Date")
# plt.grid(True)
# plt.tight_layout()
# plt.show()

# # Histogram of returns
# plt.figure(figsize=(10, 4))
# plt.hist(df["Return"], bins=100, color='steelblue', edgecolor='black')
# plt.title("Histogram of Daily Returns")
# plt.xlabel("Return")
# plt.ylabel("Frequency")
# plt.grid(True)
# plt.tight_layout()
# plt.show()

# # Rolling volatility (30-day std of returns)
# df["Volatility"] = df["Return"].rolling(window=30).std()

# plt.figure(figsize=(14, 4))
# df["Volatility"].plot(title="30-Day Rolling Volatility", ylabel="Volatility", xlabel="Date", color='darkorange')
# plt.grid(True)
# plt.tight_layout()
# plt.show()

########################################

# =============================
# Nikkei 225 Benchmark Models
# =============================

# Step 1: Import Libraries
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, mean_absolute_error

# Step 2: Download Data
nikkei = yf.download('^N225', start='2000-01-01', end='2025-05-31')
nikkei = nikkei[['Close']]
nikkei.rename(columns={'Close': 'Price'}, inplace=True)

# Step 3: Calculate Returns
nikkei['Return'] = nikkei['Price'].pct_change()
nikkei.dropna(inplace=True)

# Step 4: Check & Handle Missing Values
nikkei.fillna(method='ffill', inplace=True)

# Step 5: Plot Data (Optional)
plt.figure(figsize=(12, 6))
plt.plot(nikkei['Price'])
plt.title('Nikkei 225 Closing Prices')
plt.show()

plt.figure(figsize=(12, 6))
plt.plot(nikkei['Return'])
plt.title('Nikkei 225 Daily Returns')
plt.show()

# Step 6: Benchmark Models
# 6.1 Naïve Forecast
nikkei['Naive_Price'] = nikkei['Price'].shift(1)
nikkei['Naive_Return'] = nikkei['Return'].shift(1)

# 6.2 Simple Moving Average (SMA)
window_size = 5
nikkei['SMA_Price'] = nikkei['Price'].rolling(window=window_size).mean()

# 6.3 Exponentially Weighted Moving Average (EWMA)
alpha = 0.3
nikkei['EWMA_Price'] = nikkei['Price'].ewm(alpha=alpha, adjust=False).mean()

# Step 7: Drop NaN Values
nikkei.dropna(inplace=True)

# Step 8: Evaluation Function
def evaluate(y_true, y_pred):
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    mae = mean_absolute_error(y_true, y_pred)
    return rmse, mae

# Step 9: Calculate Errors
rmse_naive, mae_naive = evaluate(nikkei['Price'], nikkei['Naive_Price'])
rmse_sma, mae_sma = evaluate(nikkei['Price'], nikkei['SMA_Price'])
rmse_ewma, mae_ewma = evaluate(nikkei['Price'], nikkei['EWMA_Price'])

# Step 10: Print Results
print('Naïve Forecast - RMSE:', rmse_naive, 'MAE:', mae_naive)
print('SMA Forecast - RMSE:', rmse_sma, 'MAE:', mae_sma)
print('EWMA Forecast - RMSE:', rmse_ewma, 'MAE:', mae_ewma)

# Step 11: Plot Forecasts vs Actual
plt.figure(figsize=(15, 7))
plt.plot(nikkei['Price'], label='Actual Price', color='black')
plt.plot(nikkei['Naive_Price'], label='Naïve Forecast', linestyle='--')
plt.plot(nikkei['SMA_Price'], label='SMA Forecast', linestyle='--')
plt.plot(nikkei['EWMA_Price'], label='EWMA Forecast', linestyle='--')
plt.legend()
plt.title('Benchmark Model Forecasts vs Actual Price')
plt.show()