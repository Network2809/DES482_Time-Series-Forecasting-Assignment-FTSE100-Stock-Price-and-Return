# # # -*- coding: utf-8 -*-
# # """tsf_dataPreprocessing.ipynb

# # Automatically generated by Colab.

# # Original file is located at
# #     https://colab.research.google.com/drive/14iThCJk1_Qaw6aj0LS0tl4TDarHDEdTq
# # """

# # =============================
# # Nikkei 225 Benchmark Models
# # =============================

# Step 1: Import Libraries
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, mean_absolute_error
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

# Step 2: Download Data
nikkei = yf.download('^N225', start='2000-01-01', end='2025-05-31')
nikkei = nikkei[['Close']]
nikkei.rename(columns={'Close': 'Price'}, inplace=True)

# Step 3: Calculate Returns
nikkei['Return'] = nikkei['Price'].pct_change()
nikkei.dropna(inplace=True)

# Step 4: Handle Missing Values
nikkei.fillna(method='ffill', inplace=True)

# Step 5: Plot Raw Data
plt.figure(figsize=(12, 6))
plt.plot(nikkei['Price'])
plt.title('Nikkei 225 Closing Prices')
plt.show()

plt.figure(figsize=(12, 6))
plt.plot(nikkei['Return'])
plt.title('Nikkei 225 Daily Returns')
plt.show()

# Step 6: Benchmark Models
# 6.1 Naïve Forecast
nikkei['Naive_Price'] = nikkei['Price'].shift(1)

# 6.2 Simple Moving Average (SMA)
window_size = 5
nikkei['SMA_Price'] = nikkei['Price'].rolling(window=window_size).mean()

# 6.3 Exponentially Weighted Moving Average (EWMA)
alpha = 0.3
nikkei['EWMA_Price'] = nikkei['Price'].ewm(alpha=alpha, adjust=False).mean()

# Step 7: Drop NaN Values from Benchmark Models
nikkei.dropna(inplace=True)

# Step 8: Evaluation Function
def evaluate(y_true, y_pred):
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    mae = mean_absolute_error(y_true, y_pred)
    return rmse, mae

# Step 9: Calculate Errors for Benchmark Models
rmse_naive, mae_naive = evaluate(nikkei['Price'], nikkei['Naive_Price'])
rmse_sma, mae_sma = evaluate(nikkei['Price'], nikkei['SMA_Price'])
rmse_ewma, mae_ewma = evaluate(nikkei['Price'], nikkei['EWMA_Price'])

# Step 10: Print Benchmark Results
print('Naïve Forecast - RMSE:', rmse_naive, 'MAE:', mae_naive)
print('SMA Forecast - RMSE:', rmse_sma, 'MAE:', mae_sma)
print('EWMA Forecast - RMSE:', rmse_ewma, 'MAE:', mae_ewma)

# Step 11: Plot Benchmark Forecasts vs Actual
plt.figure(figsize=(15, 7))
plt.plot(nikkei['Price'], label='Actual Price', color='black')
plt.plot(nikkei['Naive_Price'], label='Naïve Forecast', linestyle='--')
plt.plot(nikkei['SMA_Price'], label='SMA Forecast', linestyle='--')
plt.plot(nikkei['EWMA_Price'], label='EWMA Forecast', linestyle='--')
plt.legend()
plt.title('Benchmark Model Forecasts vs Actual Price')
plt.show()

# Step 12: ARIMA Preprocessing - Differencing
nikkei['Diff'] = nikkei['Price'].diff()
nikkei.dropna(inplace=True)

# Step 13: Plot ACF and PACF for ARIMA Order Selection
plot_acf(nikkei['Diff'], lags=30)
plt.show()

plot_pacf(nikkei['Diff'], lags=30)
plt.show()

# Step 14: ARIMA Forecasting (Example with order (1,1,1))
model = ARIMA(nikkei['Price'], order=(1, 1, 1))
model_fit = model.fit()

# Step 15: Forecast Next 7 Days
forecast = model_fit.forecast(steps=7)

# Step 16: Plot ARIMA Forecast vs Actual
plt.figure(figsize=(15, 7))
plt.plot(nikkei['Price'], label='Actual Price', color='black')
plt.plot(forecast.index, forecast, label='ARIMA Forecast (Next 7 Days)', linestyle='--')
plt.legend()
plt.title('ARIMA Forecast vs Actual Price')
plt.show()

# Step 17: Print Forecasted Prices
print('7-Day ARIMA Forecast:')
print(forecast)